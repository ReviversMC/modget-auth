plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

version = project.version
group = project.maven_group

configurations {
    includeTransitive {
        transitive = true
    }
}

repositories {
    mavenCentral()
    maven {
        url = "https://mvnrepository.com/"
    }
    maven {
        url = "https://jitpack.io"
    }
}


dependencies {
    implementation "com.fasterxml.jackson.core:jackson-core:${project.jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${project.jackson_version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${project.jackson_version}"

    //DI
    annotationProcessor "com.google.dagger:dagger-compiler:${project.dagger_google_version}"
    implementation "com.google.dagger:dagger:${project.dagger_google_version}"

    //Misc
    implementation "com.squareup.okhttp3:okhttp:${project.okhttp3_version}"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:${project.okhttp3_version}"

    // JUnit Jupiter for testing
    testImplementation "org.junit.jupiter:junit-jupiter:${project.junit_version}"

    // compileOnly "com.github.spotbugs:spotbugs:${project.spotbugs_version}"
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// java {
//     withSourcesJar()
//     withJavadocJar()
// }

jar {
	from("LICENSE") {
		rename { "${it}_${project.name}"}
	}
    manifest {
        attributes 'Multi-Release': 'true'
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("")
}

test {
    useJUnitPlatform()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
            artifact(shadowJar) {
                builtBy shadowJar
            }
        }
    }

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            mavenLocal()
        }
    }
}